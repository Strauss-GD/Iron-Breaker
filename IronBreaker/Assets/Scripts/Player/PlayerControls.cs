//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Player/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PC Player Action Map"",
            ""id"": ""762af1a0-53af-4fb4-ac30-ccea0ea5cce7"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""7867c916-1fb2-49da-aabf-51dc4c45e75e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""12a6899a-1517-4cda-bd0e-6041007563f9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shot"",
                    ""type"": ""Button"",
                    ""id"": ""4f40b058-f28f-464a-a7ca-8753a83b4e96"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""8beb00b2-e731-41e9-b7b4-d94dd2fd8655"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3d8b8c93-2a26-4080-ae99-2e11c538228b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""39773530-cdb6-409a-8cc1-cb63d0413100"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""82bd1947-08c1-4035-af1a-626270954e5e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6c5b52e0-3f05-4744-9fdf-e03ca3b76ef2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0e30d0f6-4146-468f-8e20-304e6db44c1f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ee0c2da-ebb4-4277-8c12-288fa603d4cc"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold(duration=1,pressPoint=0.3),Press(pressPoint=0.3,behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Shot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PC Player Action Map
        m_PCPlayerActionMap = asset.FindActionMap("PC Player Action Map", throwIfNotFound: true);
        m_PCPlayerActionMap_Move = m_PCPlayerActionMap.FindAction("Move", throwIfNotFound: true);
        m_PCPlayerActionMap_Dash = m_PCPlayerActionMap.FindAction("Dash", throwIfNotFound: true);
        m_PCPlayerActionMap_Shot = m_PCPlayerActionMap.FindAction("Shot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PC Player Action Map
    private readonly InputActionMap m_PCPlayerActionMap;
    private IPCPlayerActionMapActions m_PCPlayerActionMapActionsCallbackInterface;
    private readonly InputAction m_PCPlayerActionMap_Move;
    private readonly InputAction m_PCPlayerActionMap_Dash;
    private readonly InputAction m_PCPlayerActionMap_Shot;
    public struct PCPlayerActionMapActions
    {
        private @PlayerControls m_Wrapper;
        public PCPlayerActionMapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PCPlayerActionMap_Move;
        public InputAction @Dash => m_Wrapper.m_PCPlayerActionMap_Dash;
        public InputAction @Shot => m_Wrapper.m_PCPlayerActionMap_Shot;
        public InputActionMap Get() { return m_Wrapper.m_PCPlayerActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PCPlayerActionMapActions set) { return set.Get(); }
        public void SetCallbacks(IPCPlayerActionMapActions instance)
        {
            if (m_Wrapper.m_PCPlayerActionMapActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PCPlayerActionMapActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PCPlayerActionMapActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PCPlayerActionMapActionsCallbackInterface.OnMove;
                @Dash.started -= m_Wrapper.m_PCPlayerActionMapActionsCallbackInterface.OnDash;
                @Dash.performed -= m_Wrapper.m_PCPlayerActionMapActionsCallbackInterface.OnDash;
                @Dash.canceled -= m_Wrapper.m_PCPlayerActionMapActionsCallbackInterface.OnDash;
                @Shot.started -= m_Wrapper.m_PCPlayerActionMapActionsCallbackInterface.OnShot;
                @Shot.performed -= m_Wrapper.m_PCPlayerActionMapActionsCallbackInterface.OnShot;
                @Shot.canceled -= m_Wrapper.m_PCPlayerActionMapActionsCallbackInterface.OnShot;
            }
            m_Wrapper.m_PCPlayerActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
                @Shot.started += instance.OnShot;
                @Shot.performed += instance.OnShot;
                @Shot.canceled += instance.OnShot;
            }
        }
    }
    public PCPlayerActionMapActions @PCPlayerActionMap => new PCPlayerActionMapActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    public interface IPCPlayerActionMapActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnShot(InputAction.CallbackContext context);
    }
}
